@use 'sass:math';

@import './constants.styles.scss';

/**
 * Multiple a base value with a multiple.
 */
@function multiply($base-value, $multiple) {
  @if $multiple < 0 {
    @return $base-value;
  } @else {
    @return $base-value * $multiple;
  }
}

/**
 * Converts pixels to rems
 */

@function px-to-rem($pixels) {
  $one-rem: 16;
  @return math.div($pixels, $one-rem) * 1rem;
}

/**
 * Calculates spacing based on the base unit
 */

@function spacing($multiple) {
  @if $multiple < 0 {
    @return $base-unit;
  } @else {
    @return $base-unit * $multiple;
  }
}

/**
 * Convert a string to a number
 */
@function string-to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;

  $digits: 0;

  $minus: str-slice($value, 1, 1) == '-';

  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == '.') {
      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + math.div(map-get($numbers, $character), $digits);
      }
    }
  }

  @return if($minus, -$result, $result);
}
